<?php

/**
 * @file
 * Functions to support theming in the ts_grid theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Drupal\wri_node\General;

/**
 * Implements hook_preprocess().
 */
function ts_wrin_preprocess(array &$variables) {
  if (NULL != theme_get_setting('white_logo.path')) {
    $logo_path = theme_get_setting('white_logo.path');
    $variables['footer_logo'] = \Drupal::service('file_url_generator')->generateString($logo_path);
  }
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function ts_wrin_preprocess_html(array &$variables) {
  $menu_tree = Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('main');
  $main_menu_top_level = $menu_tree->load('main', $parameters);
  foreach ($main_menu_top_level as $menu_item) {
    if ($menu_item->inActiveTrail) {
      $variables['attributes']['class'][] = 'showing-main-menu';
      break;
    }
  }
  $variables['page']["#attached"]["library"][] = "wri_zoom/ap3c_track";
  // Adds a URL query (?show-grid=1) that makes the theming grid guide visible.
  $variables['show_grid'] = \Drupal::request()->query->get('show-grid');
  $current_classes = $variables['attributes']['class'] ?? [];
  // Is field_transparent_header checked?
  $variables['attributes']['class'] = array_merge($current_classes, General::$htmlClasses);
  // Adds a class to the page if we're running a vr test with loading=eager.
  $variables['#cache']['contexts'][] = 'url.query_args:loading';
  $loading = \Drupal::request()->query->get('loading');
  // If found, set the "loading" attribute to "eager".
  if ($loading == 'eager') {
    $variables["attributes"]["class"][] = 'no-animation';
  }

  if ($node = \Drupal::request()->attributes->get('node')) {
    if ($node instanceof NodeInterface) {
      // Throw the node title in b/c it's useful.
      $variables['attributes']['class'][] = Html::getClass($node->getTitle());

      switch ($node->getType()) {
        case 'program_center':
        case 'microsite':
        case 'project_detail':
        case 'subpage':
          $variables['attributes']['class'][] = 'transparent-header white';
          break;

        case 'publication':
          if ($node->get('field_toc')->getValue() && $node->get('field_publication_display')->getString() == 'robust') {
            $variables['attributes']['class'][] = 'transparent-header white';
          }
          break;

        case 'event':
          if ($node->get('field_event_display')->getString() == 'robust') {
            $variables['attributes']['class'][] = 'transparent-header white';
          }

          if (isset($node->get('field_date_time')->getValue()[0]['end_value'])) {
            $today = DrupalDateTime::createFromTimestamp(time());
            $end_date = DrupalDateTime::createFromTimestamp($node->get('field_date_time')->getValue()[0]['end_value']);
            if ($today->diff($end_date)->invert) {
              $variables['attributes']['class'][] = 'event-status-past';
            }
            else {
              $variables['attributes']['class'][] = 'event-status-future';
            }
          }
          break;

        case 'region':
          $variables['attributes']['class'][] = 'transparent-header';
          break;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 *
 * Make Views containers available for theme sugestions.
 */
function ts_wrin_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#type']) && isset($variables['element']['#name']) && isset($variables['element']['#display_id'])) {
    $pieces = [
      $variables['element']['#type'],
      $variables['element']['#name'],
      $variables['element']['#display_id'],
    ];
    $suggestions[] = 'container__' . implode('_', $pieces);
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph templates.
 */
function ts_wrin_preprocess_paragraph(array &$variables) {
  // On person listing paragraphs, get the field title from the block title.
  // Person listing blocks do this automatically.
  if ($variables['paragraph']->getType() == 'person_listing') {
    $variables["elements"]["field_block"][0]["field_featured_experts"]['#object']->overridden_label = $variables["elements"]["field_block"][0]["#block_content"]->info->value ?? NULL;
  }
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function ts_wrin_preprocess_page(array &$variables) {
  $current_route_name = \Drupal::service('current_route_match')->getRouteName();
  if (str_starts_with($current_route_name, 'view.')) {
    $variables['is_node'] = TRUE;
  }

  $status = \Drupal::requestStack()->getCurrentRequest()->attributes->get('exception');
  if ($status && ($status->getStatusCode() == 403 || $status->getStatusCode() == 404)) {
    $variables['is_node'] = TRUE;
  }

  $variables['use_microsite_nav'] = $variables['use_microsite_nav'] ?? FALSE;
  // See if it has a Theme that overwrites the header.
  if (isset($variables['node']) && ($node = $variables['node'])) {
    // Option 1: Subpage.
    if (isset($node->field_parent_page->entity->field_theme->entity->field_header_region->value) && $node->field_parent_page->entity->field_theme->entity->field_header_region->value === 'microsite_nav') {
      $variables['use_microsite_nav'] = TRUE;
    }
    // Option 2: Microsite.
    if (isset($node->field_theme->entity->field_header_region->value) && $node->field_theme->entity->field_header_region->value === 'microsite_nav') {
      $variables['use_microsite_nav'] = TRUE;
    }
    // Add the library if parent has one.
    if (isset($node->field_theme->entity->field_library->value)) {
      $variables['#attached']['library'][] = $node->field_theme->entity->field_library->value;
    }
    // Add the library if parent has one.
    if (isset($node->field_parent_page->entity->field_theme->entity->field_library->value)) {
      $variables['#attached']['library'][] = $node->field_parent_page->entity->field_theme->entity->field_library->value;
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function ts_wrin_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Allow page-level template suggestions.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
  if (isset($node->field_parent_page)) {
    $parent = $node->field_parent_page->entity;
    if ($parent && 'microsite' == $parent->bundle()) {
      $suggestions[] = 'page__microsite';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for Field templates.
 */
function ts_wrin_preprocess_field(array &$variables) {
  // If the field is a reference to a block, add the block classes to the field.
  if ($variables['field_type'] == 'entity_reference' && isset($variables["items"][0]["content"]["#block_content"]) && isset($variables["element"][0]["#attributes"]["class"])) {
    $variables["attributes"]["class"] = $variables["element"][0]["#attributes"]["class"];
    $variables["attributes"]["class"][] = 'block';
  }
  // Add 'Show More Link' value to Featured Experts field and set the label to
  // the block description for blocks embedded as paragraphs.
  if ($variables['element']['#field_name'] == 'field_featured_experts') {
    $object = $variables['element']['#object'];
    $variables['label'] = $variables["element"]["#object"]->overridden_label ?? $variables['label'];
    if (isset($object->field_show_more_link)) {
      $variables["show_more_link"] = $object->field_show_more_link->value;
    }
  }
  // For Brasil, append a suffix to the date time field, but only if there's a
  // date showing.
  if ($variables['field_name'] == 'field_date_time' && isset($variables["ds-config"]["settings"]["suffix"])) {
    if (isset($variables["items"][0]["content"]["end"]["#text"]["time"]["value"]["#markup"])) {
      $variables["items"][0]["content"]["end"]["#text"]["time"]["value"]["#markup"] = $variables["items"][0]["content"]["end"]["#text"]["time"]["value"]["#markup"] . ' ' . $variables["ds-config"]["settings"]["suffix"];
    }
    $variables["ds-config"]["settings"]["suffix"] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function ts_wrin_preprocess_block(array &$variables) {
  $unfriendly_block_types = [
    '3_1_articles',
    'impact_in_action',
  ];
  if ($variables['plugin_id'] == 'parent_menu_block:main' && isset($variables["content"]["#items"])) {
    foreach ($variables["content"]["#items"] as $item) {
      if ($item['in_active_trail'] && $item['is_expanded']) {
        $variables['attributes']['class'][] = 'has-active-trail';
        break;
      }
    }
  }
  // Handle the case of a hero with a transparent background.
  if (isset($variables["content"]['#block_content']->field_hero_background->value)) {
    General::$htmlClasses[] = 'transparent-header';
    // Sometimes the block is cached so we have a little javascript to apply
    // transparent-header to the page in that case.
    $variables['attributes']['class'][] = 'add-transparent-header';
  }
  if (in_array($variables['derivative_plugin_id'], $unfriendly_block_types)) {
    $variables['attributes']['class'][] = 'unfriendly-block';
  }
  // Adds the field name as a class on a block.
  if ($variables['base_plugin_id'] == 'field_block' && isset($variables["content"][0]["#field_name"])) {
    $variables['attributes']['class'][] = Html::getClass($variables["content"][0]["#field_name"]);
  }

  if (NULL != theme_get_setting('white_logo.path')) {
    $logo_path = theme_get_setting('white_logo.path');
    $variables['white_logo'] = \Drupal::service('file_url_generator')->generateString($logo_path);
  }

  if (
    $variables['plugin_id'] == 'inline_block:person_listing'
    ||
    (
      isset($variables["content"]["#block_content"]->type->target_id)
      &&
      $variables["content"]["#block_content"]->type->target_id == 'person_listing'
    )
  ) {
    $variables["content"]["field_featured_experts"]["#title"] = $variables["elements"]["#configuration"]["label"];
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function ts_wrin_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']["#block_content"])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
  if (isset($variables["elements"]["content"]["#name"]) && $variables["elements"]["content"]["#name"] == 'authored_by') {
    $suggestions[] = 'block__views_block__authored_by_shared';
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function ts_wrin_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $current_view = $variables['view']->current_display;
  $current_id = $variables['view']->id();
  $current_display_type = $variables["view"]->display_handler->getPluginId();
  $suggestions[] = 'views_view__' . $current_display_type;
  $suggestions[] = 'views_view__' . $current_id;
  $suggestions[] = 'views_view__' . $current_id . '__' . $current_view;
}

/**
 * Implements hook_preprocess_views_view().
 */
function ts_wrin_preprocess_views_view(array &$variables) {
  $view_id = $variables['id'];
  $display_id = $variables['display_id'];

  if ($view_id == '3_1' && $display_id == 'block_1') {
    $variables['attributes']['class'] = 'grid';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function ts_wrin_page_attachments_alter(array &$attachments) {
  // Use the dev library if we're developing locally.
  if (in_array('ts_wrin/main', $attachments['#attached']['library']) && file_exists(__DIR__ . '/dist_dev')) {
    $index = array_search('ts_wrin/main', $attachments['#attached']['library']);
    $attachments['#attached']['library'][$index] = 'ts_wrin/dev';
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function ts_wrin_theme_suggestions_views_view_list_alter(array &$suggestions, array $variables) {
  $current_view = $variables['view']->current_display;
  $current_id = $variables['view']->id();
  $current_display_type = $variables["view"]->display_handler->getPluginId();
  $suggestions[] = 'views_view_list__' . $current_display_type;
  $suggestions[] = 'views_view_list__' . $current_id;
  $suggestions[] = 'views_view_list__' . $current_id . '__' . $current_view;
}

/**
 * Implements hook_preprocess_wri_subpage_columns().
 */
function ts_wrin_preprocess_wri_subpage_columns(&$variables) {
  // If the Microsite's theme indicates a child page should show its own header,
  // hide the Long Title from the parent page.
  if (($node = $variables["content"]["#node"]) && isset($node->field_theme->entity->field_child_hero_style->value) && $node->field_theme->entity->field_child_hero_style->value == 'self') {
    $variables["content"]["hero"]["field_long_title"]['#access'] = FALSE;
    $variables["content"]["hero"]["childimg"][0][0]["#responsive_image_style_id"] = 'paying_for_paris_subpage';
  }
  // The Microsite's theme wants us not to use the default microsite nav.
  if (($node = $variables["content"]["#node"]) && isset($node->field_theme->entity->field_header_region->value) && $node->field_theme->entity->field_header_region->value === 'microsite_nav') {
    $variables['use_microsite_nav'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_layout__onecol().
 */
function ts_wrin_preprocess_layout__onecol(array &$variables) {
  if (isset($variables['content']['#paragraph']) && $variables['content']['#paragraph']->getType() == 'accordion_item') {
    $variables['hash_id'] = Html::getUniqueId('section-' . $variables['content']['#paragraph']->field_title->value);
  }
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 */
function ts_wrin_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // If a menu contains a menu--extras.html.twig reference, move that to right
  // after the original hook_menu suggestion so that block menus can be more
  // specific.
  $menu_extras = $new_suggestions = [];
  foreach ($suggestions as $suggestion) {
    if (strpos($suggestion, 'menu__extras') === 0) {
      $menu_extras[] = $suggestion;
    }
    else {
      $new_suggestions[] = $suggestion;
    }
  }
  $suggestions = array_merge($menu_extras, $new_suggestions);
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function ts_wrin_preprocess_views_view_fields__media_library(array &$variables) {
  // @see claro_preprocess_views_view_fields__media_library();
  if (isset($variables['fields']['rendered_entity']->wrapper_attributes)) {
    $variables['fields']['rendered_entity']->wrapper_attributes->addClass('media-library-item__click-to-select-trigger');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ts_wrin_form_media_library_add_form_alter(array &$form, FormStateInterface $form_state) {
  // @see claro_form_media_library_add_form_alter.;
  $form['#attributes']['class'][] = 'media-library-add-form';
  $form['#attached']['library'][] = 'claro/media_library.theme';

  // If there are unsaved media items, apply styling classes to various parts
  // of the form.
  if (isset($form['media'])) {
    $form['#attributes']['class'][] = 'media-library-add-form--with-input';

    // Put a wrapper around the informational message above the unsaved media
    // items.
    $form['description']['#template'] = '<p class="media-library-add-form__description">{{ text }}</p>';
  }
  else {
    $form['#attributes']['class'][] = 'media-library-add-form--without-input';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ts_wrin_form_media_library_add_form_upload_alter(array &$form, FormStateInterface $form_state) {
  // @see claro_form_media_library_add_form_upload_alter($form, $form_state);
  $form['#attributes']['class'][] = 'media-library-add-form--upload';
  if (isset($form['container']['upload'])) {
    // Set this flag so we can prevent the details element from being added
    // in \Drupal\claro\ClaroPreRender::managedFile.
    $form['container']['upload']['#do_not_wrap_in_details'] = TRUE;
  }
  if (isset($form['container'])) {
    $form['container']['#attributes']['class'][] = 'media-library-add-form__input-wrapper';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ts_wrin_form_media_library_add_form_oembed_alter(array &$form, FormStateInterface $form_state) {
  // @see claro_form_media_library_add_form_oembed_alter($form,  $form_state);
  $form['#attributes']['class'][] = 'media-library-add-form--oembed';

  // If no media items have been added yet, add a couple of styling classes
  // to the initial URL form.
  if (isset($form['container'])) {
    $form['container']['#attributes']['class'][] = 'media-library-add-form__input-wrapper';
    $form['container']['url']['#attributes']['class'][] = 'media-library-add-form-oembed-url';
    $form['container']['submit']['#attributes']['class'][] = 'media-library-add-form-oembed-submit';
  }
}

/**
 * Implements hook_preprocess_item_list__media_library_add_form_media_list().
 */
function ts_wrin_preprocess_item_list__media_library_add_form_media_list(array &$variables) {
  // @see claro_preprocess_item_list__media_library_add_form_media_list($variables);
  foreach ($variables['items'] as &$item) {
    $item['value']['preview']['#attributes']['class'][] = 'media-library-add-form__preview';
    $item['value']['fields']['#attributes']['class'][] = 'media-library-add-form__fields';
    $item['value']['remove_button']['#attributes']['class'][] = 'media-library-add-form__remove-button';

    $item['value']['remove_button']['#attributes']['class'][] = 'button--extrasmall';
    // #source_field_name is set by AddFormBase::buildEntityFormElement()
    // to help themes and form_alter hooks identify the source field.
    $fields = &$item['value']['fields'];
    $source_field_name = $fields['#source_field_name'];

    // Set this flag so we can remove the details element.
    $fields[$source_field_name]['widget'][0]['#do_not_wrap_in_details'] = TRUE;

    if (isset($fields[$source_field_name])) {
      $fields[$source_field_name]['#attributes']['class'][] = 'media-library-add-form__source-field';
    }
  }
}

/**
 * Implements hook_preprocess_media_library_item__small().
 */
function ts_wrin_preprocess_media_library_item__small(array &$variables) {
  $variables['content']['select']['#attributes']['class'][] = 'media-library-item__click-to-select-checkbox';
}

/**
 * Implements hook_preprocess_links__media_library_menu().
 */
function ts_wrin_preprocess_links__media_library_menu(array &$variables) {
  foreach ($variables['links'] as &$link) {
    // Add a class to the Media Library menu items.
    $link['attributes']->addClass('media-library-menu__item');

    // This conditional exists because the media-library-menu__link class is
    // currently added by Classy, but Claro will eventually not use Classy as a
    // base theme.
    // @todo remove conditional, keep class addition in
    //   https://drupal.org/node/3110137
    // @see classy_preprocess_links__media_library_menu()
    if (!isset($link['link']['#options']['attributes']['class']) || !in_array('media-library-menu__link', $link['link']['#options']['attributes']['class'])) {
      $link['link']['#options']['attributes']['class'][] = 'media-library-menu__link';
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ts_wrin_views_pre_render(ViewExecutable $view) {
  // @see claro_views_pre_render().
  $add_classes = function (&$option, array $classes_to_add) {
    $classes = preg_split('/\s+/', $option);
    $classes = array_filter($classes);
    $classes = array_merge($classes, $classes_to_add);
    $option = implode(' ', array_unique($classes));
  };

  if ($view->id() === 'media_library') {
    if ($view->display_handler->options['defaults']['css_class']) {
      $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view']);
    }
    else {
      $add_classes($view->display_handler->options['css_class'], ['media-library-view']);
    }

    if ($view->current_display === 'page') {
      if (array_key_exists('media_bulk_form', $view->field)) {
        $add_classes($view->field['media_bulk_form']->options['element_class'], ['media-library-item__click-to-select-checkbox']);
      }
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('edit_media', $view->field)) {
        $add_classes($view->field['edit_media']->options['alter']['link_class'], ['media-library-item__edit']);
        $add_classes($view->field['edit_media']->options['alter']['link_class'], ['icon-link']);
      }
      if (array_key_exists('delete_media', $view->field)) {
        $add_classes($view->field['delete_media']->options['alter']['link_class'], ['media-library-item__remove']);
        $add_classes($view->field['delete_media']->options['alter']['link_class'], ['icon-link']);
      }
    }
    elseif (strpos($view->current_display, 'widget') === 0) {
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('media_library_select_form', $view->field)) {
        $add_classes($view->field['media_library_select_form']->options['element_wrapper_class'], ['media-library-item__click-to-select-checkbox']);
      }

      if ($view->display_handler->options['defaults']['css_class']) {
        $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view--widget']);
      }
      else {
        $add_classes($view->display_handler->options['css_class'], ['media-library-view--widget']);
      }
    }
  }
}

/**
 * Implements hook_preprocess_image().
 */
function ts_wrin_preprocess_image(&$variables) {
  // Look for a url parameter: ?loading=eager.
  $loading = \Drupal::request()->query->get('loading');
  // If found, set the "loading" attribute to "eager".
  if ($loading == 'eager') {
    $variables["attributes"]["loading"] = 'eager';
  }
}
