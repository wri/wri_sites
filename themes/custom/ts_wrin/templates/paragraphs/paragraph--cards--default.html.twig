{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'instrument-card',
  ]
%}

{% set eyebrow = content.field_eyebrow %}
{% set image = content.field_image %}
{% set link = content.field_link[0]['#url'].toString() %}
{% set title = content.field_link[0]['#title'] %}
{% set links = content.field_links|filter((item, key) => key|first != "#") %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}

      {# Content #}
      <div class="instrument-card__content">

        {# Shadow #}
        <div class="instrument-card__shadow"></div>

        {# Link. This is absolutely position and covers the entire card. #}
        {% if link %}
          <a href="{{ link }}" class="instrument-card__link-overlay">
            <span class="visually-hidden">{{ title }}</span>
          </a>
        {% endif %}

        {# Eyebrow #}
        {% if eyebrow %}
          {{ eyebrow }}
        {% endif %}

        {# Title #}
        {% if title %}
          <h2>{{ title }}</h2>
        {% endif %}

        {# Links #}
        {% if links %}
          <ul class="instrument-card__links">
            {% for link in links %}
              {% set title = link['#title'] %}
              {% set href = link['#url'].toString() %}

              <li>
                <a href="{{ href }}" class="instrument-card__link">

                  {# Title #}
                  <span>{{ title }}</span>

                  {# Arrow #}
                  <div class="instrument-card__link__icon">
                    {{ source(ts_wrin_path ~ '/img/svgs/arrow-blue-pfp.svg') }}
                  </div>
                </a>
              </li>
            {% endfor %}
          </ul>
        {% endif %}
      </div>

      {# Image #}
      <div class="instrument-card__image">
        {% if image %}
          {{ image }}
        {% endif %}
      </div>
      
    {% endblock %}
  </div>
{% endblock paragraph %}