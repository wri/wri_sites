<?php

/**
 * @file
 * Wri Node module code.
 */

use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;
use Drupal\taxonomy\Entity\Term;
use Drupal\wri_node\General;
use Twig\Error\LoaderError;

/**
 * Implements hook_preprocess_hook().
 */
function wri_node_preprocess_wri_page_hero(&$context) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node) {
    $node_route = \Drupal::routeMatch()->getRawParameter('section_storage');
    $node_id = str_replace('node.', '', $node_route);
    $node = Node::load($node_id);
  }
  if ($node instanceof NodeInterface) {
    if (isset($node->field_main_image->entity->field_media_image->entity->uri->value)) {
      $uri = $node->field_main_image->entity->field_media_image->entity->uri->value;
      $alt = $node->field_main_image->entity->field_media_image->alt;
      $responsive_image_style = ResponsiveImageStyle::load('landing_page_hero');
      $image_style = ImageStyle::load($responsive_image_style->getFallbackImageStyle());
      $build_uri = $image_style->buildUri($uri);
      $image_factory = \Drupal::service('image.factory')->get($build_uri);
      $height = $image_factory->getToolkit()->getHeight();
      $width = $image_factory->getToolkit()->getWidth();

      $build = [
        '#uri' => $uri,
        '#attributes' => [
          'alt'   => $alt,
          'loading' => 'eager',
          'width' => $height,
          'height' => $width,
        ],
        '#theme' => 'responsive_image',
        '#responsive_image_style_id' => 'landing_page_hero',
      ];
      $context['content']['hero_image'] = $build;
      General::$htmlClasses[] = 'transparent-header white';
    }
    else {
      $context['content']['hero_image'] = [];
    }
    $context['content']['title']['#markup'] = isset($node->field_long_title->value) ? check_markup($node->field_long_title->value, 'basic_html') : $node->getTitle();
    $context['content']['intro']['#markup'] = isset($node->field_intro->value) ? check_markup($node->field_intro->value, 'basic_html') : '';
    // The Microsite's theme wants us not to use the default microsite nav.
    if (isset($node->field_theme->entity->field_header_region->value) && $node->field_theme->entity->field_header_region->value === 'microsite_nav') {
      $context['use_microsite_nav'] = TRUE;
    }
    // Add the table of contents if that's part of the node.
    if (isset($node->field_toc->value) && $node->field_toc->value === 'microsite') {
      $context['content']['hero']['field_toc'] = $node->field_toc->view('hero_on_a_subpage');
    }
    // Tell the template to include another if this is a microsite.
    // Hack to work around https://www.drupal.org/node/2911996 which prevents
    // Layouts from having theme suggestions.
    if (isset($node->field_theme->entity->field_library->value)) {
      $theme_suggestion = Html::cleanCssIdentifier($node->field_theme->entity->field_library->value);
      $themename = Drupal::service('config.factory')->get('system.theme')->get('default');
      try {
        // Make sure the twig template exists.
        Drupal::service('twig')->load("@$themename/_includes/wri-page-hero--" . $theme_suggestion . ".html.twig");
        $context['content']['theme_switch'] = $theme_suggestion;
      }
      catch (LoaderError $e) {
        // Don't load anything custom.
        $context['content']['theme_switch'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function wri_node_preprocess_layout__card(&$variables) {
  $variables['default_image'] = [];
  if (Drupal::config('wri_node.settings')->get('use_fallback_image')) {
    $node = $variables['content']['#node'];
    $topic = $node->field_primary_topic->target_id ?? FALSE;
    $image_url = '';
    $theme = 'image';
    if ($topic) {
      // Get default image form term.
      $term = Term::load($topic);
      if ($term) {
        if ($term->field_default_image && $term->field_default_image->target_id) {
          $image_url = $term->field_default_image->entity->getFileUri();
          $theme = 'image_style';
        }
        else {
          // Get default image from default by name.
          $name = $term->name->value;
          $image_url = \Drupal::service('extension.list.module')
            ->getPath('wri_node') . '/images/' . strtolower(str_replace(' ', '-', $name)) . '.jpg';
          if (!file_exists($image_url)) {
            $image_url = \Drupal::service('extension.list.module')
              ->getPath('wri_node') . '/images/default.jpg';
          }
        }
      }
    }
    else {
      // Get default image.
      $image_url = \Drupal::service('extension.list.module')
        ->getPath('wri_node') . '/images/default.jpg';
    }

    $variables['default_image'] = [
      '#theme' => $theme,
      '#style_name' => '463x330',
      '#uri' => $image_url,
      '#alt' => '',
    ];
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function wri_node_preprocess_html(&$variables) {
  $variables['ads_data_redaction'] = TRUE;
  if (Drupal::config('wri_node.settings')->get('disable_ads_data_redaction')) {
    $variables['ads_data_redaction'] = FALSE;
  }
  $responses_to_hide_osana = [
    404,
    403,
  ];
  $variables['osano_script'] = TRUE;
  $status = \Drupal::requestStack()->getCurrentRequest()->attributes->get('exception');
  if ($status && in_array($status->getStatusCode(), $responses_to_hide_osana)) {
    $variables['osano_script'] = FALSE;
  }
  elseif (Drupal::config('wri_node.settings')->get('disable_osano_script')) {
    $variables['osano_script'] = FALSE;
  }
}
