<?php

/**
 * @file
 * Wri Node module code.
 */

use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Add the node settings values.
 */
function wri_node_update_9501() {
  \Drupal::service('distro_helper.updates')->updateConfig('wri_node.settings', [
    'unpublished_person_phrase',
    'person_listing_url',
  ], 'wri_node', 'install');
}

/**
 * Updates the node settings values.
 */
function wri_node_update_9502() {
  \Drupal::service('distro_helper.updates')->updateConfig('wri_node.settings', [
    'twitter_share_suffix',
    'disable_osano_script',
  ], 'wri_node', 'install');
}

/**
 * Updates the content snippets.
 */
function wri_node_update_9503() {
  \Drupal::service('distro_helper.updates')->updateConfig('content_snippets.content', [
    'snippets#osano_id',
    'snippets#osano_params',
  ], 'wri_listing_block');
  \Drupal::service('distro_helper.updates')->updateConfig('content_snippets.items', [
    'osano_id',
    'osano_params',
  ], 'wri_admin');
}

/**
 * Updates the node and_phrase and within_phase values.
 */
function wri_node_update_10001() {
  $collections = \Drupal::service('config.manager')->getConfigCollectionInfo();

  foreach ($collections->getCollectionNames() as $collection_name) {
    if ($collection_name) {
      [, $language] = explode('.', $collection_name);
    }
    else {
      $config_translation = \Drupal::configFactory()->getEditable('wri_node.settings');
      $language = $default_language = $config_translation->get('langcode');
    }
    $phrase = 'and';
    $within = 'within';

    switch ($language) {
      case 'en':
        $phrase = 'and';
        $within = '[node:projects_links_within] within';
        break;

      case 'fr':
        $phrase = 'et';
        $within = '[node:projects_links_within] dans';
        break;

      case 'es':
        $phrase = 'y';
        $within = '[node:projects_links_within] del';
        break;

      case 'zh-hans':
        $within = '[node:projects_links_within] within';
        $phrase = 'and';
        break;

      case 'id':
        $phrase = 'dan';
        $within = '[node:projects_links_within] dalam';
        break;

      case 'pt-br':
        $phrase = 'e';
        $within = 'do projeto [node:projects_links_within]';
        break;
    }

    if ($collection_name && $default_language != $language) {
      \Drupal::languageManager()->getLanguageConfigOverride($language, 'wri_node.settings')->set('and_phrase', $phrase)->save();
      \Drupal::languageManager()->getLanguageConfigOverride($language, 'wri_node.settings')->set('within_phrase', $within)->save();
    }
    else {
      \Drupal::configFactory()->getEditable('wri_node.settings')->set('and_phrase', $phrase)->save();
      \Drupal::configFactory()->getEditable('wri_node.settings')->set('within_phrase', $within)->save();
    }
  }
}

/**
 * Updates tokens in default value of narrative taxonomies.
 */
function wri_node_update_10002() {
  // Load all narrative taxonomy fields on nodes.
  $narrative_fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties(['field_name' => 'field_narrative_taxonomy']);
  $old_values = [
    'node:field_primary_contacts:entity:link',
    '&#91;node:field_projects:entity:link&#93; within ',
  // En.
    '[node:field_projects:entity:link] within ',
    '&#91;node:field_projects:entity:link&#93; dalam ',
  // Id.
    '[node:field_projects:entity:link] dalam ',
    '&#91;node:field_projects:entity:link&#93; del ',
  // Es.
    '[node:field_projects:entity:link] del ',
    'do projeto &#91;node:field_projects:entity:link&#93; ',
  // pt-br.
    'do projeto [node:field_projects:entity:link] ',
  ];
  $new_values = [
    'node:primary_contact_links',
    '&#91;node:projects_links_within&#93;',
    '[node:projects_links_within]',
    '&#91;node:projects_links_within&#93;',
    '[node:projects_links_within]',
    '&#91;node:projects_links_within&#93;',
    '[node:projects_links_within]',
    '&#91;node:projects_links_within&#93;',
    '[node:projects_links_within]',
  ];

  // Loop through the fields.
  foreach ($narrative_fields as $narrative_field) {
    $field = \Drupal::configFactory()->getEditable('field.field.' . $narrative_field->id());
    // Find and replace the tokens.
    $field->set('description', str_replace($old_values, $new_values, $field->get('description')));
    $default_value = $field->get('default_value');
    if (isset($default_value[0]['value'])) {
      $default_value[0]['value'] = str_replace($old_values, $new_values, $default_value[0]['value']);
      $field->set('default_value', $default_value);
    }

    $field->save();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function wri_node_update_dependencies() {
  $dependencies['wri_node'][10401] = [
    'wri_paragraph' => 10401,
  ];
  $dependencies['wri_node'][10402] = [
    'wri_person' => 10402,
  ];
  return $dependencies;
}

/**
 * Add field_social_links.
 */
function wri_node_update_10401() {
  \Drupal::service('distro_helper.updates')->installConfig('field.storage.node.field_social_links', 'wri_node');
  \Drupal::service('distro_helper.updates')->installConfig('field.storage.node.field_social_sharing_links', 'wri_node');

  $message = 'Add field Paragraphs.';
  return $message;
}

/**
 * Migrate field_twitter_account values into a social_media_sites paragraph.
 */
function wri_node_update_10402() {
  // Define the content types to process.
  $content_types = ['person'];

  wri_update_twitter_replacement($content_types);
}

/**
 * Migrate field_twitter_account values into a social_media_sites paragraph.
 */
function wri_node_update_10403() {
  // Define the content types to process.
  $content_types = ['project_detail'];

  wri_update_twitter_replacement($content_types);
}

/**
 * Migrate field_twitter_account values into a social_media_sites paragraph.
 *
 * @param array $content_types
 *   The content types to process.
 */
function wri_update_twitter_replacement($content_types) {
  // Query for nodes with a non-empty field_twitter_account.
  $query = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', $content_types, 'IN')
    ->exists('field_twitter_account');
  $nids = $query->execute();

  // Load the taxonomy term for Twitter from the Social Media sites vocabulary.
  $twitter_terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties([
      'vid' => 'social_media_sites',
      'name' => 'Twitter',
    ]);
  $twitter_term = $twitter_terms ? reset($twitter_terms) : NULL;

  $nodes = Node::loadMultiple($nids);
  $migrated_nids = [];

  foreach ($nodes as $node) {
    if ($node->hasField('field_twitter_account') && !$node->get('field_twitter_account')->isEmpty()) {
      // Check if the node already has a Twitter paragraph.
      $hasTwitterParagraph = FALSE;
      if ($node->hasField('field_paragraphs') && !$node->get('field_paragraphs')->isEmpty()) {
        foreach ($node->get('field_paragraphs') as $item) {
          $paragraph = $item->entity;
          if ($paragraph && $paragraph->bundle() == 'social_media_sites') {
            $siteField = $paragraph->get('field_site')->getValue();
            if (!empty($siteField) && $siteField[0]['target_id'] == $twitter_term->id()) {
              $hasTwitterParagraph = TRUE;
              break;
            }
          }
        }
      }
      if ($hasTwitterParagraph) {
        \Drupal::messenger()->addStatus(t('Node @nid already has a Twitter paragraph; skipping migration.', ['@nid' => $node->id()]));
        // Clear the old field anyway.
        $node->set('field_twitter_account', NULL);
        $node->save();
        continue;
      }

      // Process the migration if no Twitter paragraph exists.
      $link_item = $node->get('field_twitter_account')->first();
      if ($link_item) {
        $uri = $link_item->uri;
        $handle = $link_item->title;

        // Create a new paragraph of type social_media_sites.
        $paragraph = Paragraph::create([
          'type' => 'social_media_sites',
          // Set all field values before saving.
          'field_text' => $handle,
          'field_link' => [
            'uri' => $uri,
            'title' => $handle,
          ],
          'field_site' => [
            ['target_id' => $twitter_term->id()],
          ],
        ]);
        $paragraph->save();

        // Attach the paragraph to the node's field_social_links field.
        if ($node->hasField('field_social_links')) {
          $node->get('field_social_links')->appendItem([
            'target_id' => $paragraph->id(),
            'target_revision_id' => $paragraph->getRevisionId(),
          ]);
          // Optionally, clear the old field_twitter_account.
          $node->set('field_twitter_account', NULL);
          $node->save();
          $migrated_nids[] = $node->id();
        }
      }
    }
  }

  if (!empty($migrated_nids)) {
    $message = t('Migrated Twitter account values for node IDs: @nids', ['@nids' => implode(', ', $migrated_nids)]);
    \Drupal::messenger()->addStatus($message);
  }
  else {
    \Drupal::messenger()->addStatus(t('No nodes were migrated.'));
  }
  return t('Migrated field_twitter_account values to social_media_sites paragraphs for applicable nodes.');
}
