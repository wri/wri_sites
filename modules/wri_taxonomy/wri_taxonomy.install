<?php

/**
 * @file
 * Install, update and uninstall hooks for the wri_sites install profile.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\File\FileSystemInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function wri_taxonomy_install() {
  // Add terms needed for different configs.
  // Article: 49b8dec4-f95c-4b9f-8ad7-3dd51706da53.
  $article = Term::create([
    'name' => 'Article',
    'vid' => 'resource_type',
    'uuid' => '49b8dec4-f95c-4b9f-8ad7-3dd51706da53',
  ]);
  $article->save();
  // Podcasts: taxonomy_term:resource_type:721a8bb1-b5a4-49dc-ad12-e65066833beb.
  Term::create([
    'name' => 'Podcast',
    'parent' => $article->id(),
    'vid' => 'resource_type',
    'uuid' => '721a8bb1-b5a4-49dc-ad12-e65066833beb',
  ])->save();
}

/**
 * Update the argument for the resource type to allow spaces.
 */
function wri_taxonomy_update_9501() {
  \Drupal::service('distro_helper.updates')->updateConfig('views.view.resource_types', ['display#default#display_options#arguments'], 'wri_taxonomy');
}

/**
 * Add taxonomy term topics and subtopics.
 */
function wri_taxonomy_update_9502() {
  // Create a new field: field_default_image.
  $entitytype = 'taxonomy_term';
  $field = 'field_default_image';
  $field_storage_name = 'field.storage.' . $entitytype . '.' . $field;
  $bundle = 'topics_and_subtopics';
  $config_directory = new FileStorage(\Drupal::service('extension.list.module')->getPath('wri_taxonomy'), '/config/install');
  $config_record = $config_directory->read($field_storage_name);
  if (!FieldStorageConfig::loadByName($config_record['entity_type'], $config_record['field_name'])) {
    FieldStorageConfig::create($config_record)->save();
  }
  $field_config_name = 'field.field.' . $entitytype . '.' . $bundle . '.' . $field;
  $config_record = $config_directory->read($field_config_name);
  if (!FieldConfig::loadByName($config_record['entity_type'], $config_record['bundle'], $config_record['field_name'])) {
    FieldConfig::create($config_record)->save();
  }
}

/**
 * Add "Social Media sites" vocabulary, and populate with predefined terms.
 */
function wri_taxonomy_update_10401() {
  $vid = 'social_media_sites';
  $module_path = \Drupal::service('extension.list.module')->getPath('wri_taxonomy');
  $storage = new FileStorage($module_path . '/config/install');

  if (!Vocabulary::load($vid)) {
    $vocab_config_name = 'taxonomy.vocabulary.' . $vid;
    $vocab_data = $storage->read($vocab_config_name);
    if ($vocab_data) {
      $vocabulary = Vocabulary::create($vocab_data);
      $vocabulary->save();
    }
  }

  // Field storage.
  if (!FieldStorageConfig::load('taxonomy_term.field_icon')) {
    $field_storage_config = $storage->read('field.storage.taxonomy_term.field_icon');
    if ($field_storage_config) {
      FieldStorageConfig::create($field_storage_config)->save();
      \Drupal::messenger()->addStatus(t('Created field storage for field_icon.'));
    }
  }

  // Field instance (field config) on the "social_media_sites" bundle.
  if (!FieldConfig::load('taxonomy_term.' . $vid . '.field_icon')) {
    $field_config = $storage->read('field.field.taxonomy_term.' . $vid . '.field_icon');
    if ($field_config) {
      FieldConfig::create($field_config)->save();
      \Drupal::messenger()->addStatus(t('Created field instance for field_icon on the Social Media sites vocabulary.'));
    }
  }

  // Import the entity form display configuration.
  $form_display_name = 'core.entity_form_display.taxonomy_term.' . $vid . '.default';
  $form_display_data = $storage->read($form_display_name);
  if ($form_display_data) {
    \Drupal::configFactory()->getEditable($form_display_name)
      ->setData($form_display_data)
      ->save();
    \Drupal::messenger()->addStatus(t('Imported the form display configuration.'));
  }

  // Import the entity view display configuration.
  $view_display_name = 'core.entity_view_display.taxonomy_term.' . $vid . '.default';
  $view_display_data = $storage->read($view_display_name);
  if ($view_display_data) {
    \Drupal::configFactory()->getEditable($view_display_name)
      ->setData($view_display_data)
      ->save();
    \Drupal::messenger()->addStatus(t('Imported the view display configuration.'));
  }

  \Drupal::service('cache.bootstrap')->invalidateAll();
  \Drupal::service('cache.config')->invalidateAll();

  $term_machine_names = [
    'facebook',
    'twitter',
    'linkedin',
    'youtube',
    'instagram',
    'wechat',
    'weibo',
    'bluesky',
    'threads',
  ];

  // Get the theme path for your custom theme.
  $theme_handler = \Drupal::service('extension.list.theme');
  $theme_path = $theme_handler->getPath('ts_wrin');

  // Prepare a destination directory in the public file system.
  $destination_directory = 'public://social_media_icons';
  \Drupal::service('file_system')->prepareDirectory($destination_directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  foreach ($term_machine_names as $machine_name) {
    $term_name = ucfirst($machine_name);
    // Load term(s) by vocabulary and name.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => $vid,
        'name' => $term_name,
      ]);
    if ($terms) {
      // If the term exists, update it if needed.
      $term = reset($terms);
      $icon_values = $term->get('field_icon')->getValue();
      // Skip if the term already has a field_icon value.
      if (!empty($icon_values)) {
        continue;
      }
    }
    else {
      // If no term exists, create a new one.
      $term = Term::create([
        'vid' => $vid,
        'name' => $term_name,
      ]);
    }

    // Build the source path to the SVG file.
    $source_path = $theme_path . '/img/svgs/' . $machine_name . '.svg';
    if (!file_exists($source_path)) {
      \Drupal::messenger()->addWarning(t('SVG file for @machine not found at @source.', [
        '@machine' => $machine_name,
        '@source' => $source_path,
      ]));
      continue;
    }

    // Read the SVG file data.
    $data = file_get_contents($source_path);

    // Define the destination URI.
    $destination_uri = $destination_directory . '/' . $machine_name . '.svg';
    $file_uri = \Drupal::service('file_system')->saveData($data, $destination_uri, FileSystemInterface::EXISTS_REPLACE);
    if ($file_uri) {
      $file = File::create([
        'uri' => $file_uri,
      ]);
      $file->setPermanent();
      $file->save();

      // Set or update the field_icon value.
      $term->set('field_icon', [
        'target_id' => $file->id(),
        'alt' => $term_name . ' icon',
        'title' => $term_name . ' icon',
      ]);
      $term->save();
      \Drupal::messenger()->addStatus(t('Created/updated term @name with icon.', ['@name' => $term_name]));
    }
  }
}
