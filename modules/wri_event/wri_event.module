<?php

/**
 * @file
 * Wri_event.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\webform\WebformSubmissionInterface;

/**
 * Implements hook_views_query_alter().
 */
function wri_event_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // On the Events view, if the "date" is set to "Show past Events" (value = 2)
  // change the date sort to DESC (so older events are at the bottom).
  if ($view->id() == 'events' && is_numeric($view->exposed_raw_input['date']) && $view->exposed_raw_input['date'] == 2) {
    $sort = &$query->getSort();
    $sort['field_date_time'] = 'DESC';
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function wri_event_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'node') {
    // Add a field that shows the parent of the term, or itself if no parent.
    $fields['addtocal'] = BaseFieldDefinition::create('addtocal')
      ->setName('addtocal')
      ->setLabel(t('Calendar item'))
      ->setSetting('target_type', 'node')
      ->setComputed(TRUE)
      ->setClass('\Drupal\wri_common\WriCalculatedTexts')
      ->setDisplayConfigurable('view', TRUE)
      ->setCardinality(1);
  }
  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wri_event_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity && $entity->id() === 'event') {
    $setting = $entity->getThirdPartySetting('wri_event', 'enable_backlink');

    $form['wri_events'] = [
      '#type' => 'details',
      '#group' => 'additional_settings',
      '#title' => t('WRI Events Settings'),
    ];

    $form['wri_events']['enable_backlink'] = [
      '#type' => 'checkbox',
      '#title' => t('Include a backlink based on the "?returnTo=" URL argument on Full event displays'),
      '#default_value' => $setting,
    ];

    $form['#entity_builders'][] = 'wri_event_node_form_builder';
  }
}

/**
 * Entity builder for the node:event entity.
 */
function wri_event_node_form_builder($entity_type, $entity, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('enable_backlink')) {
    $value = $form_state->getValue('enable_backlink');
    $entity->setThirdPartySetting('wri_event', 'enable_backlink', $value);
  }
  else {
    $entity->setThirdPartySetting('wri_event', 'enable_backlink', FALSE);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function wri_event_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'event') {
    if ($entity->type->entity->getThirdPartySetting('wri_event', 'enable_backlink')) {
      $build["#attached"]["library"][] = "wri_event/backlink";
      $build['#backlink_enabled'] = TRUE;
    }
    else {
      $build['#backlink_enabled'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wri_event_form_node_event_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_zoom_registration_form']) && isset($form['field_zoom_form_fields'])) {
    $option_fields = [];
    $webform = Drupal::entityTypeManager()->getStorage('webform')->load($form['field_zoom_registration_form']['widget'][0]['target_id']['#default_value']);
    if ($webform) {
      foreach ($webform->getElementsDecodedAndFlattened() as $id => $element) {
        if ($element['#type'] == 'select') {
          $option_fields[] = ['value' => $id];
        }
      }
    }
    $index = 0;
    while ($index <= $form['field_zoom_form_fields']['widget']['#max_delta']) {
      $form['field_zoom_form_fields']['widget'][$index]['options']['#states']['visible'] = [
        'select[name="field_zoom_form_fields[' . $index . '][field]"]' => $option_fields,
      ];
      $index++;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function wri_event_webform_submission_prepare_form(WebformSubmissionInterface $webform_submission, $operation, FormStateInterface $form_state) {
  $event = $webform_submission->getSourceEntity();
  $webform = $webform_submission->getWebform();
  $webform_tweaks = $event->field_zoom_form_fields->getValue();
  foreach ($webform_tweaks as $tweak) {
    $defaults = $webform->getElement($tweak['field']);
    if ($tweak['disabled']) {
      $defaults['#type'] = 'hidden';
    }
    if ($tweak['required']) {
      $defaults['#required'] = TRUE;
    }
    if (!empty($tweak['options'])) {
      $option_set = Drupal::entityTypeManager()->getStorage('webform_options')->load($tweak['options']);
      if ($option_set) {
        $defaults['#options'] = $option_set->getOptions();
      }
    }
    $webform->setElementProperties($tweak['field'], $defaults);
  }
}
