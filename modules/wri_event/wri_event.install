<?php

/**
 * @file
 * Event install hooks.
 */

/**
 * Update the event display configs to remove blazy.
 */
function wri_event_update_9301() {

  \Drupal::service('distro_helper.updates')->installConfig('core.entity_view_display.node.event.card', 'wri_event', 'install', 'TRUE');

  $message = 'Remove blazy, responsive image';
  return $message;
}

/**
 * Implements hook_update_dependencies().
 */
function wri_event_update_dependencies() {
  // We must have the distro_helper module before we can run the 9301 update.
  $dependencies['wri_event'][9301] = [
    'wri_sites' => 8908,
  ];

  return $dependencies;
}

/**
 * Update the event display configs to add Zoom fields and settings.
 */
function wri_event_update_10001() {
  // Enable the wri_zoom module.
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('wri_zoom')) {
    \Drupal::service('module_installer')->install(['wri_zoom'], TRUE);
  }

  // Add the fields.
  \Drupal::service('distro_helper.updates')->installConfig('field.storage.node.field_sent_to_orto', 'wri_node', 'install', 'TRUE');
  \Drupal::service('distro_helper.updates')->installConfig('field.storage.node.field_zoom_registration_form', 'wri_node', 'install', 'TRUE');
  \Drupal::service('distro_helper.updates')->installConfig('field.storage.node.field_zoom_webinar_id', 'wri_node', 'install', 'TRUE');
  \Drupal::service('distro_helper.updates')->installConfig('field.storage.node.field_zoom_list_id', 'wri_node', 'install', 'TRUE');

  // Attach the fields to the Event node.
  \Drupal::service('distro_helper.updates')->installConfig('field.field.node.event.field_sent_to_orto', 'wri_event', 'install', 'TRUE');
  \Drupal::service('distro_helper.updates')->installConfig('field.field.node.event.field_zoom_registration_form', 'wri_event', 'install', 'TRUE');
  \Drupal::service('distro_helper.updates')->installConfig('field.field.node.event.field_zoom_webinar_id', 'wri_event', 'install', 'TRUE');
  \Drupal::service('distro_helper.updates')->installConfig('field.field.node.event.field_zoom_list_id', 'wri_event', 'install', 'TRUE');

  // Updating the Event form display.
  \Drupal::service('distro_helper.updates')->updateConfig('core.entity_form_display.node.event.default', [
    'third_party_settings#field_group#group_zoom',
    'third_party_settings#field_group#group_registration_options',
    'third_party_settings#field_group#group_link',
    'third_party_settings#field_group#group_registration_types',
    'content#field_sent_to_orto',
    'content#field_zoom_registration_form',
    'content#field_zoom_webinar_id',
    'content#field_zoom_list_id',
  ], 'wri_event');

  // Updating the Event displays that have the new button.
  \Drupal::service('distro_helper.updates')->updateConfig('core.entity_view_display.node.event.main_content', [
    'third_party_settings#ds#regions#buttons',
    'third_party_settings#ds#regions#main_content',
    'third_party_settings#ds#fields#register_button',
    'content#field_register',
    'content#field_zoom_registration_form',
  ], 'wri_event');

  \Drupal::service('distro_helper.updates')->updateConfig('core.entity_view_display.node.event.search_results', [
    'third_party_settings#ds#regions#main_section',
    'third_party_settings#ds#fields#register_button',
    'content#field_register',
  ], 'wri_event');

  $message = 'Added Zoom tie-in fields, webform, and settings.';
  return $message;
}

/**
 * Update the Smart Date compact_dot date format.
 */
function wri_event_update_10002() {
  \Drupal::service('distro_helper.updates')->updateConfig('smart_date.smart_date_format.compact_dot', [
    'time_hour_format',
  ], 'wri_event');
}

/**
 * Deletes the 'asset_injector.css.event_pages' config.
 */
function wri_event_update_10003() {
  // Load the configuration.
  $config_name = 'asset_injector.css.event_pages';

  // Define the file path to the configuration file in the project root /config/
  // directory.
  $config_file_path = dirname(DRUPAL_ROOT) . '/config/asset_injector.css.event_pages.yml';

  // Check if the configuration exists in the active store.
  if (\Drupal::configFactory()->getEditable($config_name)->isNew() === FALSE) {
    // Delete the configuration from active storage.
    \Drupal::configFactory()->getEditable($config_name)->delete();

    \Drupal::logger('wri_event')->notice('Configuration %config_name was successfully deleted from active storage.', [
      '%config_name' => $config_name,
    ]);

    // Check if the config file exists in the /config/ directory.
    if (file_exists($config_file_path)) {
      // Attempt to delete the file.
      if (unlink($config_file_path)) {
        \Drupal::logger('wri_event')->notice('Configuration file %file_path was successfully deleted from the config directory.', [
          '%file_path' => $config_file_path,
        ]);
      }
      else {
        \Drupal::logger('wri_event')->error('Failed to delete configuration file %file_path.', [
          '%file_path' => $config_file_path,
        ]);
      }
    }
    else {
      \Drupal::logger('wri_event')->warning('Configuration file %file_path not found in the config directory.', [
        '%file_path' => $config_file_path,
      ]);
    }
  }
  else {
    \Drupal::logger('wri_event')->warning('Configuration %config_name not found in active storage.', [
      '%config_name' => $config_name,
    ]);
  }
}

/**
 * Update Smart Date compact_dot time_format and update the asset injectors.
 */
function wri_event_update_10004() {
  \Drupal::service('distro_helper.updates')->updateConfig('smart_date.smart_date_format.compact_dot', [
    'time_format', 'time_hour_format',
  ], 'wri_event');

  // Load the configuration.
  $config_name = 'asset_injector.js.add_gmt_to_events';

  // Define the file path to the configuration file in the project root /config/
  // directory.
  $config_file_path = dirname(DRUPAL_ROOT) . '/config/asset_injector.js.add_gmt_to_events.yml';

  // Check if the configuration exists in the active store.
  if (\Drupal::configFactory()->getEditable($config_name)->isNew() === FALSE) {
    // Delete the configuration from active storage.
    \Drupal::configFactory()->getEditable($config_name)->delete();

    \Drupal::logger('wri_event')->notice('Configuration %config_name was successfully deleted from active storage.', [
      '%config_name' => $config_name,
    ]);

    // Check if the config file exists in the /config/ directory.
    if (file_exists($config_file_path)) {
      // Attempt to delete the file.
      if (unlink($config_file_path)) {
        \Drupal::logger('wri_event')->notice('Configuration file %file_path was successfully deleted from the config directory.', [
          '%file_path' => $config_file_path,
        ]);
      }
      else {
        \Drupal::logger('wri_event')->error('Failed to delete configuration file %file_path.', [
          '%file_path' => $config_file_path,
        ]);
      }
    }
    else {
      \Drupal::logger('wri_event')->warning('Configuration file %file_path not found in the config directory.', [
        '%file_path' => $config_file_path,
      ]);
    }
  }
  else {
    \Drupal::logger('wri_event')->warning('Configuration %config_name not found in active storage.', [
      '%config_name' => $config_name,
    ]);
  }
}

/**
 * Add a new calendar event description field to events.
 */
function wri_event_update_10005() {
  // Add the fields.
  \Drupal::service('distro_helper.updates')
    ->installConfig('field.storage.node.field_calendar_description', 'wri_event', 'install', 'TRUE');

  // Attach the fields to the Event node.
  \Drupal::service('distro_helper.updates')
    ->installConfig('field.field.node.event.field_calendar_description', 'wri_event', 'install', 'TRUE');

  // Updating the Event form display.
  \Drupal::service('distro_helper.updates')
    ->updateConfig('core.entity_form_display.node.event.default', [
      'third_party_settings#field_group#group_registration_types',
      'content#field_calendar_description',
    ], 'wri_event');

  // Updating the Event main content display.
  \Drupal::service('distro_helper.updates')
    ->updateConfig('core.entity_view_display.node.event.main_content', [
      'content#addtocal',
    ], 'wri_event');
}

/**
 * Update the registration field to be translatable.
 */
function wri_event_update_10006() {
  \Drupal::service('distro_helper.updates')->updateConfig('field.field.node.event.field_register', [
    'translatable',
  ], 'wri_event');

  $message = 'Event registration field is now translatable.';
  return $message;
}
