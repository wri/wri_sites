<?php

/**
 * @file
 * The wri_spoke module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\UrlHelper;
use Drupal\entity_share_client\Service\StateInformationInterface;

/**
 * Implements hook_cron().
 *
 * @throws \DateMalformedStringException
 */
function wri_spoke_cron() {
  $remote_manager = \Drupal::service('entity_share_client.remote_manager');
  $settings = \Drupal::service('config.factory')->getEditable('wri_spoke.cron.settings');

  $import_config_id = 'hub_events';
  $channel_settings = $settings->get('channel');
  if (!is_array($channel_settings)) {
    $channel_settings = [$channel_settings];
  }
  $remote_id = $settings->get('remote');

  $remote = \Drupal::entityTypeManager()->getStorage('remote')->load($remote_id);
  $channels_info = $remote_manager->getChannelsInfos($remote, [
    'rethrow' => TRUE,
  ]);
  $sync_from_times = $settings->get('changed_since') ?? [];
  foreach ($channel_settings as $channel_id => $enabled) {
    if ($enabled) {
      $channel_sync_from = $sync_from_times[$channel_id] ?? 0;
      if ($channel_sync_from) {
        $time = new DateTime($channel_sync_from);
        $filter_time = $time->getTimestamp();
      }
      else {
        $filter_time = 0;
      }
      if (isset($channels_info[$channel_id])) {
        $parsed_url = UrlHelper::parse($channels_info[$channel_id]['url']);
        $parsed_url['query']['filter'] = [
          'changed' => [
            'path' => 'changed',
            'operator' => '>',
            'value' => $filter_time,
          ],
        ];
        $parsed_url['query']['sort'] = [
          'changed' => [
            'path' => 'changed',
            'direction' => 'ASC',
          ],
        ];
        $prepared_url = $parsed_url['path'] . '?' . UrlHelper::buildQuery($parsed_url['query']);

        try {
          $response = $remote_manager->jsonApiRequest($remote, 'GET', $prepared_url, [
            'rethrow' => TRUE,
          ]);
        }
        catch (\Throwable $exception) {
          \Drupal::logger('wri_spoke')
            ->error("Unable to retrieve Events from the Hub for channel $channel_id.");
          continue;
        }
        $json = Json::decode((string) $response->getBody());
        $data = array_slice($json['data'], 0, $settings->get('limit') ?? 20);

        $state_information = \Drupal::service('entity_share_client.state_information');
        $entities_to_sync = [];
        $states_to_sync = [
          StateInformationInterface::INFO_ID_NEW,
          StateInformationInterface::INFO_ID_CHANGED,
        ];
        foreach ($data as $item) {
          $sync_state = $state_information->getStatusInfo($item);
          $channel_sync_from = $item['attributes']['changed'];
          if (in_array($sync_state['info_id'], $states_to_sync)) {
            $entities_to_sync[] = $item['id'];
          }
        }
        /** @var \Drupal\entity_share_async\Service\QueueHelperInterface $queue_helper */
        $queue_helper = \Drupal::service('entity_share_async.queue_helper');
        $queue_helper->enqueue($remote_id, $channel_id, $import_config_id, $entities_to_sync);
        $sync_from_times[$channel_id] = $channel_sync_from;
      }
    }
    $settings->set('changed_since', $sync_from_times);
    $settings->save();
  }
}
