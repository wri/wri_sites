<?php

/**
 * @file
 * Update hooks for wri_article.
 */

/**
 * Enable the wri_text_block module.
 */
function wri_common_update_9401() {
  // Import the config from core.
  \Drupal::service('distro_helper.updates')->installConfig('field.storage.block_content.body', 'block_content', 'install');

  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('wri_text_block')) {
    \Drupal::service('module_installer')->install(['wri_text_block'], TRUE);
  }
}

/**
 * Enable the wri_latest_tweet module.
 */
function wri_common_update_9402() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('wri_latest_tweet')) {
    \Drupal::service('module_installer')->install(['wri_latest_tweet'], TRUE);
  }
}

/**
 * Add the edit button to all media library elements.
 */
function wri_common_update_9501() {
  $config_factory = \Drupal::service('config.factory');
  // Find all core.entity_form_display config.
  $all_config = $config_factory->listAll('core.entity_form_display');
  $loaded_config = $config_factory->loadMultiple($all_config);
  foreach ($loaded_config as $name => $config) {
    // Find any config that uses the media_library module.
    if ($config->get('dependencies.module') && in_array('media_library', $config->get('dependencies.module'))) {
      $editable_config = $config_factory->getEditable($name);
      $fields = $editable_config->get('content');
      foreach ($fields as $field_name => $field) {
        // Find any references to type: media_library_widget.
        if (isset($field['type']) && $field['type'] == 'media_library_widget') {
          // Add the edit button to the widget.
          $field['third_party_settings'] = [
            'media_library_edit' => [
              'show_edit' => 1,
            ],
          ];

          $editable_config->set('content.' . $field_name, $field);
        }
      }
      // Save the config.
      $editable_config->save();
    }
  }
}

/**
 * Add the ckeditor_accordion module.
 */
function wri_common_update_9502() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('ckeditor_accordion')) {
    \Drupal::service('module_installer')->install(['ckeditor_accordion'], TRUE);
  }
  // Add default Accordion settings.
  \Drupal::service('distro_helper.updates')->installConfig('ckeditor_accordion.settings', 'wri_admin', 'install');
  // Add Accordion to the full_html editor's buttons.
  \Drupal::service('distro_helper.updates')->updateConfig('editor.editor.full_html', [
    'settings#toolbar#rows',
  ], 'wri_media', 'install');
}

/**
 * Add the new setting for twitter_share_suffix.
 */
function wri_common_update_9503() {
  // Add twitter_share_suffix value.
  \Drupal::service('distro_helper.updates')->updateConfig('wri_node.settings', [
    'twitter_share_suffix',
  ], 'wri_node', 'install');
}

/**
 * Replace the ckeditor_template module with ckeditor5_templates.
 */
function wri_common_update_10101() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('ckeditor')) {
    \Drupal::service('module_installer')->uninstall(['ckeditor'], TRUE);
  }
  if ($moduleHandler->moduleExists('ckeditor_templates')) {
    \Drupal::service('module_installer')->uninstall(['ckeditor_templates'], TRUE);
  }
  if (!$moduleHandler->moduleExists('ckeditor5')) {
    \Drupal::service('module_installer')->install(['ckeditor5'], TRUE);
  }
  if (!$moduleHandler->moduleExists('ckeditor5_template')) {
    \Drupal::service('module_installer')->install(['ckeditor5_template'], TRUE);
  }
}

/**
 * Install jquery.once.
 */
function wri_common_update_10102() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('jquery_once')) {
    \Drupal::service('module_installer')->install(['jquery_once'], TRUE);
  }
}

/**
 * Uninstall textfield_counter.
 */
function wri_common_update_10103() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('textfield_counter')) {
    \Drupal::service('module_installer')->uninstall(['textfield_counter'], TRUE);
  }
}

/**
 * Support downgrading display suite to the 3.x branch.
 */
function wri_common_update_10104() {
  // Load all entity_view_display config.
  $config_factory = \Drupal::service('config.factory');
  $loaded_config = \Drupal::entityQuery('entity_view_display')
    ->condition('third_party_settings.ds.regions.content', NULL, 'IS NOT NULL')
    ->execute();

  // Look at all config and find any using a ds third-party setting.
  foreach ($loaded_config as $name => $config) {
    $editable_config = $config_factory->getEditable('core.entity_view_display.' . $name);
    $layout_id = $editable_config->get('third_party_settings.ds.layout.id');
    // If $layout_id starts with "ds_".
    if (strpos($layout_id, 'ds_') === 0) {
      // Convert any 'content' regions to 'ds_content'.
      $has_content_region = $editable_config->get('third_party_settings.ds.regions.content');
      if ($has_content_region) {
        $editable_config->set('third_party_settings.ds.regions', ['ds_content' => $has_content_region]);
        $editable_config->set('third_party_settings.ds.layout.settings.wrappers', ['ds_content' => 'div']);
        $fields = $editable_config->get('content');
        foreach ($fields as $field_name => $value) {
          if ($value['region'] == 'content') {
            $fields[$field_name]['region'] = 'ds_content';
          }
        }
        $editable_config->set('content', $fields);
        $editable_config->save();
      }
    }
  }
}

/**
 * Adding the Analytics URL configuration default value.
 */
function wri_common_update_10301() {
  // Import the content_snippets:
  \Drupal::service('distro_helper.updates')->updateConfig('content_snippets.content', ['snippets#analytics_url'], 'wri_listing_block');
  \Drupal::service('distro_helper.updates')->updateConfig('content_snippets.items', [
    'analytics_url',
  ], 'wri_admin');
}

/**
 * Replace "WRI's" with the org_name token in narrative taxonomy field help texts.
 */
function wri_common_update_10302() {
  $config_factory = \Drupal::configFactory();
  $config_storage = \Drupal::service('config.storage');
  $prefix = 'field.field.node.';
  $suffix = '.field_narrative_taxonomy';

  // Get all config names that match our target pattern.
  $all_configs = $config_storage->listAll($prefix);
  $target_configs = array_filter($all_configs, function ($name) use ($suffix) {
    return str_ends_with($name, $suffix);
  });

  foreach ($target_configs as $config_name) {
    $config = $config_factory->getEditable($config_name);
    $help = $config->get('settings.help') ?? '';

    // Replace both straight and HTML-encoded apostrophe versions.
    $replacements = [
      "WRI's" => "[wri_tokens:org_name]'s",
      "WRI&#39;s" => "[wri_tokens:org_name]&#39;s",
    ];
    $new_help = strtr($help, $replacements);

    if ($new_help !== $help) {
      $config->set('settings.help', $new_help)->save();
      \Drupal::logger('wri_common')->notice("Updated help text in config: @name", ['@name' => $config_name]);
    }
  }
}


/**
 * Update field config for narrative taxonomy to use org_name token.
 */
function wri_common_update_10303() {
  $config_factory = \Drupal::configFactory();
  $config_storage = \Drupal::service('config.storage');
  $prefix = 'field.field.node.';
  $suffix = '.field_narrative_taxonomy';

  $target_configs = array_filter(
    $config_storage->listAll($prefix),
    fn($name) => str_ends_with($name, $suffix)
  );

  foreach ($target_configs as $config_name) {
    $config = $config_factory->getEditable($config_name);

    $description = $config->get('description') ?? '';
    $default_value = $config->get('default_value');
    $changed = FALSE;

    // Replace WRI's â†’ [wri_tokens:org_name]'s
    $description_replacements = [
      "WRI's" => "[wri_tokens:org_name]'s",
      "WRI&#39;s" => "[wri_tokens:org_name]&#39;s",
    ];
    $new_description = strtr($description, $description_replacements);

    if ($new_description !== $description) {
      $config->set('description', $new_description);
      $changed = TRUE;
    }

    // Update the default value if it's a text value.
    if (is_array($default_value) && isset($default_value[0]['value'])) {
      $text = $default_value[0]['value'];
      $new_text = strtr($text, $description_replacements);

      if ($new_text !== $text) {
        $default_value[0]['value'] = $new_text;
        $config->set('default_value', $default_value);
        $changed = TRUE;
      }
    }

    if ($changed) {
      $config->save();
      \Drupal::logger('wri_common')->notice('Updated field config: @name', ['@name' => $config_name]);
    }
  }
}

