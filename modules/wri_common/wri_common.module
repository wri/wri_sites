<?php

/**
 * @file
 * Provides hook implementations for wri_common.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteObjectInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function wri_common_theme($existing, $type, $theme, $path) {
  return [
    'wri_common_social_sharing_block' => [
      'variables' => ['items' => '', 'twitter_suffix' => ''],
      'template' => 'wri-common-social-sharing-block',
      'path' => $path . '/theme',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function wri_common_entity_extra_field_info() {
  $extra = [];

  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->Id()]['display']['wri_social_sharing_block'] = [
      'label' => t('Social Sharing Block'),
      'description' => t('Adds a social sharing block with links to social media and print.'),
      'weight' => 1,
      'visible' => FALSE,
    ];
  }

  $extra['paragraph']['accordion_item']['display']['wri_social_sharing_block'] = [
    'label' => t('Social Sharing Block'),
    'description' => t('Adds a social sharing block with links to social media and print.'),
    'weight' => 1,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function wri_common_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $build['wri_social_sharing_block'] = wri_common_get_social_share($display);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function wri_common_paragraph_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $build['wri_social_sharing_block'] = wri_common_get_social_share($display);
}

/**
 * Helper function to build the social sharing block.
 *
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 *   The display.
 *
 * @return array
 *   The render array for the element.
 */
function wri_common_get_social_share(EntityViewDisplayInterface $display) {
  if ($display->getComponent('wri_social_sharing_block')) {
    global $base_url;
    $request = \Drupal::request();

    if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
      $title = \Drupal::service('title_resolver')->getTitle($request, $route);
    }
    else {
      $title = \Drupal::config('system.site')->get('name');
    }
    $title = $title ?? '';
    $items = [
      'title' => strip_tags($title),
      'page_url' => Url::fromRoute('<current>', [], ['absolute' => TRUE]),
      'base_url' => $base_url,
    ];
    return [
      '#theme' => 'wri_common_social_sharing_block',
      '#items' => $items,
      '#twitter_suffix' => Drupal::config('wri_node.settings')->get('twitter_share_suffix') ?? '',
    ];
  }
  return [];
}

/**
 * Helper function to change block settings.
 *
 * @param array $form
 *   Form render array.
 * @param string $bundle
 *   The bundle of the block to hide the title checkbox.
 */
function wri_common_change_block_settings(array &$form, $bundle) {
  $this_bundle = '';
  if (isset($form["block_form"]["#block"])) {
    $this_bundle = $form["block_form"]["#block"]->bundle();
  }
  elseif (isset($form['settings']["block_form"]["#block"])) {
    $this_bundle = $form['settings']["block_form"]["#block"]->bundle();
  }
  if ($this_bundle == $bundle) {
    $form['settings']['label_display']['#access'] = FALSE;
    $form['settings']['label_display']['#default_value'] = FALSE;
    $form['settings']['label']['#description'] = t('This title will not be displayed to the user.');
  }
}

/**
 * Implements hook_token_info().
 */
function wri_common_token_info() {

  $info = [];
  $info['types']['wri_tokens'] = [
    'name' => t('WRI Tokens'),
    'description' => t('Custom tokens for WRI.'),
  ];
  $info['tokens']['wri_tokens']['summary'] = [
    'name' => 'Custom Summary',
    'description' => 'A shortened version of the node body value.',
  ];
  $info['tokens']['wri_tokens']['topic_and_sub_topic_links_list'] = [
    'name' => 'Topic and Sub Topic Links List',
    'description' => 'A comma separated list with the Primary topic and Sub topic links for the node.',
  ];
  $info['tokens']['wri_tokens']['sub_topic_links_list'] = [
    'name' => 'Sub Topic Links List',
    'description' => 'A comma separated list of Sub topic links for the node\'s primary topic.',
  ];
  $info['tokens']['wri_tokens']['child_topic_links_list'] = [
    'name' => 'Child Topic Links List',
    'description' => 'A comma separated list of Topics that are children of the node\'s primary topic.',
  ];
  $info['tokens']['node']['link'] = [
    'name' => 'A node link',
    'description' => 'The link to the node, if published, or its title if not.',
  ];
  $info['tokens']['node']['projects_links'] = [
    'name' => 'A listing of project links',
    'description' => 'The link to the related projects if published, and nothing if not.',
  ];
  $info['tokens']['node']['projects_links_within'] = [
    'name' => 'A listing of project links, followed by "within"',
    'description' => 'The link to the related projects if published, and the site title if no projects are related.',
  ];
  $info['tokens']['node']['primary_contact_links'] = [
    'name' => 'The primary contact link or a fallback phrase.',
    'description' => 'The link to the related primary contact if published, and a fallback phrase if no published contact found.',
  ];
  $info['tokens']['taxonomy_term']['link'] = [
    'name' => 'A term link',
    'description' => 'The link to the term, if published, or its title if not.',
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function wri_common_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'wri_tokens') {
    if (isset($data['node']) && $node = $data['node']) {
      foreach ($tokens as $name => $original) {
        // Find the desired token by name.
        switch ($name) {
          // @see web/core/modules/node/node.tokens.inc
          case 'summary':
            if (isset($options['langcode'])) {
              $url_options['language'] = \Drupal::languageManager()->getLanguage($options['langcode']);
              $langcode = $options['langcode'];
            }
            else {
              $langcode = LanguageInterface::LANGCODE_DEFAULT;
            }

            $translation = \Drupal::service('entity.repository')->getTranslationFromContext($node, $langcode, ['operation' => 'node_tokens']);
            if ($translation->hasField('body') && ($items = $translation->get('body')) && !$items->isEmpty()) {
              $item = $items[0];
              $output = $item->processed;
              // Generate a trimmed summary of the body field.
              // Get the 'trim_length' size used for the 'teaser' mode, if
              // present, or use the default trim_length size.
              $display_options = \Drupal::service('entity_display.repository')
                ->getViewDisplay('node', $node->getType(), 'teaser')
                ->getComponent('body');
              if (isset($display_options['settings']['trim_length'])) {
                $length = $display_options['settings']['trim_length'];
              }
              else {
                $settings = \Drupal::service('plugin.manager.field.formatter')->getDefaultSettings('text_summary_or_trimmed');
                $length = $settings['trim_length'];
              }

              $output = text_summary($output, $item->format, $length);
              // Generate markup object to allow for html.
              $replacements[$original] = Markup::create($output);
            }
            break;

          case 'topic_and_sub_topic_links_list':
            $terms = wri_common_get_node_topics($node, FALSE);
            // If the node has a topic whose Landing page points to a value in
            // Project, filter that out.
            if ($terms && $node->hasField('field_projects') && ($projects = $node->get('field_projects')) && !$projects->isEmpty()) {
              $project_items = [];
              $allowed_terms = [];
              foreach ($projects->getValue() as $value) {
                $project_items[] = $value['target_id'];
              }
              foreach ($terms as $term) {
                if (!in_array($term->field_landing_page->target_id, $project_items)) {
                  $allowed_terms[] = $term;
                }
              }
              $terms = $allowed_terms;
            }

            if (empty($terms)) {
              $replacements[$original] = \Drupal::config('system.site')->get('name');
            }
            else {
              $replacements[$original] = _wri_common_format_list($terms);
            }
            break;

          case 'sub_topic_links_list':
            $terms = wri_common_get_node_topics($node, TRUE);
            $replacements[$original] = _wri_common_format_list($terms);
            break;

          case 'child_topic_links_list':
            $terms = wri_common_get_node_topic_children($node);
            $replacements[$original] = _wri_common_format_list($terms);
            break;
        }
      }
    }
  }
  if ($type == 'node') {
    if (isset($data['node']) && $node = $data['node']) {
      foreach ($tokens as $name => $original) {
        // Find the desired token by name.
        switch ($name) {
          case 'link':
            $replacements[$original] = wri_common_link_or_text($data['node']);
            break;

          case 'projects_links':
            if ($node->hasField('field_projects') && ($projects = $node->get('field_projects')->referencedEntities())) {
              $published_projects = [];
              foreach ($projects as $project) {
                if ($project->isPublished()) {
                  $published_projects[] = $project;
                }
              }

              $replacements[$original] = _wri_common_format_list($published_projects);
            }
            break;

          case 'projects_links_within':
            // Get the projects_links value using tokens.
            $phrase = \Drupal::config('wri_node.settings')->get('within_phrase');
            $replaced = \Drupal::token()->replace('[node:projects_links]', ['node' => $node], ['clear' => TRUE]);
            if ($replaced) {
              $replacements[$original] = Markup::create((str_replace('[node:projects_links_within]', $replaced, $phrase) . ' '));
            }
            break;

          case 'primary_contact_links':
            if ($node->hasField('field_primary_contacts') && ($contact_items = $node->get('field_primary_contacts')) && !$contact_items->isEmpty()) {
              $contact_item = $contact_items->first()->entity;
              if ($contact_item) {
                $replacements[$original] = wri_common_link_or_text($contact_item, $node);
              }
              else {
                $replacements[$original] = wri_common_person_link_fallback($node);
              }
            }
            else {
              $replacements[$original] = wri_common_person_link_fallback($node);
            }
            break;
        }
      }
    }
  }
  if ($type == 'taxonomy_term') {
    if (isset($data['taxonomy_term']) && $node = $data['taxonomy_term']) {
      foreach ($tokens as $name => $original) {
        // Find the desired token by name.
        switch ($name) {
          case 'link':
            $replacements[$original] = wri_common_link_or_text($data['taxonomy_term']);
        }
      }
    }
  }
  return $replacements;
}

/**
 * Get topics for a given node.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node object.
 * @param bool $secondary_only
 *   Should this only return secondary topics?
 *
 * @return array
 *   Array of Taxonomy Term objects.
 */
function wri_common_get_node_topics(Node $node, $secondary_only = FALSE) {
  $topics = [];
  $existing_topics = [];
  if (!$secondary_only && $node->hasField('field_primary_topic') && ($topic_items = $node->get('field_primary_topic')) && !$topic_items->isEmpty() && $topic_items->first()->entity) {
    $topics[] = $topic_items->first()->entity;
    $existing_topics[$topic_items->first()->entity->id()] = TRUE;
  }
  if ($node->hasField('field_tags') && ($tag_items = $node->get('field_tags')) && !$tag_items->isEmpty()) {
    foreach ($tag_items as $tag_item) {
      if (isset($tag_item->entity) && $tag_item->entity->bundle() == 'topics_and_subtopics' && $tag_item->entity->isPublished() && !isset($existing_topics[$tag_item->entity->id()])) {
        $topics[] = $tag_item->entity;
        $existing_topics[$tag_item->entity->id()] = TRUE;
      }
    }
  }

  return $topics;
}

/**
 * Get child topics for a given node.
 *
 * @param \Drupal\node\Entity\Node $node
 *   The node object.
 *
 * @return array
 *   Array of Taxonomy Term objects.
 */
function wri_common_get_node_topic_children(Node $node) {
  $topics = [];
  if ($node->hasField('field_primary_topic') && ($items = $node->get('field_primary_topic')) && !$items->isEmpty()) {
    $item = $items->first()->entity;
    if ($item) {
      $vid = $item->vid->getString();
      $parent_tid = $item->tid->getString();
      $child_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parent_tid, 1, TRUE);
      if ($child_terms) {
        foreach ($child_terms as $term) {
          $topics[] = $term;
        }
      }
    }
  }
  return $topics;
}

/**
 * Formats a comma separated list of passed items with and.
 *
 * @param array $terms
 *   An array of Taxonomy Term objects.
 *
 * @return \Drupal\Component\Render\MarkupInterface|string
 *   Rendered output: a string of comma separated links or words with and.
 */
function _wri_common_format_list(array $terms) {
  $list = '';
  if ($terms) {
    $lang_code = \Drupal::service('language_manager')->getCurrentLanguage()->getId();
    foreach ($terms as $term) {
      if ($term->hasTranslation($lang_code)) {
        $term = $term->getTranslation($lang_code);
      }
      $published = $term->isPublished();
      if ($published) {
        $term_url = $term->toUrl();
        if ($term->hasField('field_full_name') && $term_label = $term->get('field_full_name')->getString()) {
          if ($term_url->toString()) {
            $term_name = Link::fromTextAndUrl($term_label, $term_url)
              ->toRenderable();
            $renderer = \Drupal::service('renderer');
            $term_name = $renderer->render($term_name);
          }
        }
        else {
          $term_name = $term->toLink()->tostring();
        }
      }
      else {
        $term_name = $term->label();
      }

      // If there is more than 1 term, build a list.
      if (count($terms) > 1) {
        if (!next($terms)) {
          // Put no comma between A and B, remove Oxford comma.
          $list = trim($list, ', ') . ' ';
          // Leave the Oxford comma, A, B, and C.
          $list .= \Drupal::config('wri_node.settings')->get('and_phrase') . " $term_name";
        }
        else {
          $list .= "$term_name, ";
        }
      }
      // Otherwise just return the one term.
      else {
        $list = $term_name;
      }
    }
  }

  return Markup::create($list);
}

/**
 * Determines whether or not to print an entity's title with link or without.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param \Drupal\node\Entity\NodeInterface $node
 *   The node that this entity is appearing on, if not the same as the entity.
 *
 * @return string
 *   A string representing the entity with or without a link.
 */
function wri_common_link_or_text(EntityInterface $entity, ?NodeInterface $node = NULL) {
  $lang_code = \Drupal::service('language_manager')->getCurrentLanguage()->getId();
  if ($entity->hasTranslation($lang_code)) {
    $entity = $entity->getTranslation($lang_code);
  }
  $link = '';
  if (isset($entity)) {
    if ($entity->isPublished()) {
      $link = $entity->toLink()->toString();
    }
    else {
      if ($entity->bundle() == 'person' && $node) {
        $link = wri_common_person_link_fallback($node);
      }
      else {
        $link = $entity->label();
      }
    }
  }
  return $link;
}

/**
 * Fallback for when a person is unpublished.
 *
 * @param \Drupal\Core\Entity\EntityInterface $node
 *   The person node.
 *
 * @return \Drupal\Core\GeneratedLink
 *   The link.
 */
function wri_common_person_link_fallback(EntityInterface $node) {
  $url = wri_common_url_from_node_project($node);

  if (!$url) {
    $url = Url::fromUserInput(\Drupal::config('wri_node.settings')
      ->get('person_listing_url'));
  }

  // Fallback to the /about/experts page.
  $link = Link::fromTextAndUrl(\Drupal::config('wri_node.settings')->get('unpublished_person_phrase'), $url)->toString();

  return $link;
}

/**
 * Get the URL for a project from a node.
 *
 * @param \Drupal\Core\Entity\EntityInterface $node
 *   The node.
 *
 * @return \Drupal\Core\Url|false\
 *   The url, or false if no url could be produced.
 */
function wri_common_url_from_node_project($node) {
  $url = FALSE;
  if ($node instanceof NodeInterface) {
    // If the current page is a project, link to its experts page.
    if ($node->bundle() == 'project_detail') {
      $url = Url::fromUserInput('/project-experts/' . $node->id());
    }
    // Otherwise, see if that node has a 'field_projects', and THAT node
    // is published.
    elseif ($node->hasField('field_projects')) {
      $project = $node->field_projects->entity;
      if ($project && $project->isPublished()) {
        // If it is, link to the projects/experts page.
        $url = Url::fromUserInput('/project-experts/' . $node->field_projects->target_id);
      }
    }
  }
  return $url;
}

/**
 * Implements hook_page_attachments_alter().
 */
function wri_common_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['drupalSettings']['wri_common']['gtm_id'] = content_snippets_retrieve('gtm_id');
  $attachments['#attached']['drupalSettings']['wri_common']['analytics_url'] = content_snippets_retrieve('analytics_url');
}

/**
 * Implements hook_views_data_alter().
 */
function wri_common_views_data_alter(&$data) {
  if (isset($data['taxonomy_term_field_data'])) {
    $term_name = $data['taxonomy_term_field_data']['name'];

    // Create a new views argument for reading taxonomy term names with spaces.
    $data['taxonomy_term_field_data']['spaced_name'] = [
      'title' => t('Custom: Taxonomy name with spaces'),
      'title short' => t('Name (spaces)'),
      'argument' => $term_name['argument'],
    ];

    $data['taxonomy_term_field_data']['spaced_name']['argument']['id'] = 'string_with_space';
    $data['taxonomy_term_field_data']['spaced_name']['argument']['real field'] = 'name';
  }
}
